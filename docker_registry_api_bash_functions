#!/usr/bin/env bash

############################################################################################################################################################
# This file contains the Docker Registry API Bash functions. It is meant to be sourced from bash scripts which require these functions.
#
#   Example:
#
#   source "path"/docker_registry_api_bash_functions  
#
#   Pre-requisites:
#
#     The curl command must be installed.
#     The jq command must be installed.
#     You must be logged into Docker and have admin access to Docker Store in order to inspect images in dockerstorestaging.
#
############################################################################################################################################################
# Gary Forghetti
# Docker, Inc
############################################################################################################################################################

export DOCKER_REGISTRY_API_BASH_FUNCTIONS_VERSION="1.0"

############################################################################################################################################################
# Check to make sure the required prerequisites are in place
############################################################################################################################################################
function check_docker_registry_api_bash_functions_prerequisites() {
      ######################################################################################################################################################
      # Check to see if the DOCKER_USER environment variable is set
      ######################################################################################################################################################
      if [[ -z $DOCKER_USER ]]; then
            printf 'The DOCKER_USER environment variable is not set!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Check to see if the DOCKER_PASSWORD environment variable is set
      ######################################################################################################################################################
      if [[ -z $DOCKER_PASSWORD ]]; then
            printf 'The DOCKER_PASSWORD environment variable is not set!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Check for the curl command
      ######################################################################################################################################################
      if [[ $(which curl > /dev/null ; echo $?) -ne 0 ]]; then
            printf 'This script requires the curl command!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Check for the jq command
      ######################################################################################################################################################
      if [[ $(which jq > /dev/null ; echo $?) -ne 0 ]]; then
            printf 'This script requires the jq command!\n' >&2
            return 1
      fi
}

############################################################################################################################################################
# Chech the prerequisites when this file is sourced.
############################################################################################################################################################
check_docker_registry_api_bash_functions_prerequisites; if [[ $? -ne 0 ]]; then return 1; fi

############################################################################################################################################################
# Function to print the error details for a Docker Registry API error
############################################################################################################################################################
function print_docker_registry_api_error() {
      local HTTP_CODE=$(echo "$OUTPUT" | awk 'END{print}')
      local OUTPUT=$(echo "$1" | awk 'NR > 1 { print prev } { prev = $0 }' )
      local ERRORS=$(echo "${OUTPUT}" | jq -r '.errors[0]?' 2> /dev/null)
      if [[ ! -z $ERRORS  && $ERRORS != 'null' ]]; then
            ERRORS=$(echo "${OUTPUT}" | jq -r '.errors[0]?.code?, " - ", .errors[0]?.message?' | awk '{printf("%s",$0)}')
            printf 'HTTP_CODE="%s" Error="%s"\n' "${HTTP_CODE}" "${ERRORS}" >&2
      else
            local DETAILS=$(echo "${OUTPUT}" | jq -r '.details?' 2> /dev/null)
            if [[ ! -z $DETAILS && $DETAILS != 'null' ]]; then
                  printf 'HTTP_CODE="%s" Details="%s"\n' "${HTTP_CODE}" "${DETAILS}" >&2
            else
                  printf '%s\n' "${OUTPUT}" >&2
            fi
      fi
      return 1
}

############################################################################################################################################################
# Function to get a Docker Registry API token
############################################################################################################################################################
function get_docker_registry_api_token() {
      check_docker_registry_api_bash_functions_prerequisites; if [[ $? -ne 0 ]]; then return 1; fi

      ######################################################################################################################################################
      # Verify a docker REPO was specified on the command line
      ######################################################################################################################################################
      local DOCKER_REPO=$1
      if [[ -z $DOCKER_REPO ]]; then
            printf 'You must specify a docker repo!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Verify the syntax of the Docker Repository, it must be prefixed with "username/", library/ or dockerstorestaging/
      ######################################################################################################################################################
      if [[ $DOCKER_REPO != */* ]]; then
            printf '\nYou did not prefix the Docker Image with a user name (username/, library/ or sdockerstorestaging/)!\n' >&2
            return 1
      fi
      
      ############################################################################################################################################################
      # Set the DOCKER_REGISTRY_API_AUTH_ENDPOINT variable to the Docker Hub Registry https://auth.docker.io if it is not set.
      ############################################################################################################################################################
      shopt -s nocasematch
      if [[ -z $DOCKER_REGISTRY_API_AUTH_ENDPOINT ]]; then
            DOCKER_REGISTRY_API_AUTH_ENDPOINT='https://auth.docker.io'
      elif [[ "${DOCKER_REGISTRY_API_AUTH_ENDPOINT:0:8}" != "https://" ]]; then
            DOCKER_REGISTRY_API_AUTH_ENDPOINT="https://${DOCKER_REGISTRY_API_AUTH_ENDPOINT}"
      fi
      shopt -u nocasematch
    
      ############################################################################################################################################################
      # Call the Docker Registry API to retrieve a token
      ############################################################################################################################################################
      local OUTPUT=$(curl --silent --user "${DOCKER_USER}:${DOCKER_PASSWORD}" --write-out "\n%{http_code}" \
      "${DOCKER_REGISTRY_API_AUTH_ENDPOINT}"'/token?service=registry.docker.io&scope=repository:'"${DOCKER_REPO}"':pull')
      local HTTP_CODE=$(echo "$OUTPUT" | awk 'END{print}')
      if [[ "$HTTP_CODE" != "200" ]]; then
            printf 'Unable to get an authorization token!\n' >&2
            print_docker_registry_api_error "${OUTPUT}"
            return 1
      else
            local TOKEN=$(echo "$OUTPUT" | awk 'NR > 1 { print prev } { prev = $0 }' | jq -r .token?)
            printf '%s\n' "${TOKEN}"
            return 0
     fi
}

############################################################################################################################################################
# Function to get the Docker image tags for a Docker repository
############################################################################################################################################################
function get_docker_repo_tags() {
      ######################################################################################################################################################
      # Verify a docker image was specified on the command line
      ######################################################################################################################################################
      if [[ -z $1 ]]; then
            printf 'You must specify a Docker Repo!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Strip off the tag in case it was specified.
      ######################################################################################################################################################
      DOCKER_REPO=$(echo $1 | awk -F':' '{print $1}')
      if [[ $DOCKER_REPO != */* ]]; then
            printf '\n%sYou did not prefix the Docker Repo with a username (username/, "library/" or "dockerstorestaging/")!%s\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Get a Docker Registry API Token
      ######################################################################################################################################################
      local TOKEN=$(get_docker_registry_api_token "${DOCKER_REPO}"); if [[ $? -ne 0 || -z $TOKEN ]]; then return 1; fi

      ######################################################################################################################################################
      # Set the DOCKER_REGISTRY_API_QUERY_ENDPOINT variable to the Docker Hub Registry https://registry-1.docker.io if it is not set.
      ######################################################################################################################################################
      shopt -s nocasematch
      if [[ -z $DOCKER_REGISTRY_API_QUERY_ENDPOINT ]]; then
            DOCKER_REGISTRY_API_QUERY_ENDPOINT='https://registry-1.docker.io'
      elif [[ "${DOCKER_REGISTRY_API_QUERY_ENDPOINT:0:8}" != "https://" ]]; then
            DOCKER_REGISTRY_API_QUERY_ENDPOINT="https://${DOCKER_REGISTRY_API_QUERY_ENDPOINT}"
      fi
      shopt -u nocasematch

      ############################################################################################################################################################
      # Call the Docker Registry API to retrieve the Tags for the Docker Repository
      ############################################################################################################################################################
      local MANIFEST_HEADER='application/vnd.docker.distribution.manifest.list.v2+json,application/vnd.docker.distribution.manifest.v2+json'
      local OUTPUT=$(curl --silent --header "Authorization: BEARER ${TOKEN}" --header "Accept: ${MANIFEST_HEADER}" --write-out "\n%{http_code}" \
      "${DOCKER_REGISTRY_API_QUERY_ENDPOINT}/v2/${DOCKER_REPO}/tags/list")
      local HTTP_CODE=$(echo "$OUTPUT" | awk 'END{print}')
      if [[ "$HTTP_CODE" != "200" ]]; then
            printf 'Unable to get the tags for the Docker Repo %s!\n' "${DOCKER_REPO}" >&2 
            print_docker_registry_api_error "${OUTPUT}"
            return 1
      else
            local DOCKER_REPO_TAGS=$(echo "$OUTPUT" | awk 'NR > 1 { print prev } { prev = $0 }')
            printf '%s\n' "${DOCKER_REPO_TAGS}"
            return 0
      fi
}

############################################################################################################################################################
# Function to get the Docker image digest for a Docker image
############################################################################################################################################################
function get_docker_image_digest() {
      ######################################################################################################################################################
      # Verify a docker image was specified on the command line
      ######################################################################################################################################################
      local DOCKER_IMAGE=$1
      if [[ -z $DOCKER_IMAGE ]]; then
            printf 'You must specify a Docker Image!\n' >&2
            return 1
      fi    

      ######################################################################################################################################################
      # Verify the syntax of the Docker Image, it must be prefixed with a Docker Repository followed by a tag
      ######################################################################################################################################################
      local DOCKER_REPO=$(echo $DOCKER_IMAGE | awk -F':' '{print $1}')
      if [[ -z $DOCKER_REPO ]]; then
            printf 'You must specify a Docker Repo!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Verify the syntax of the Docker Repository, it must be prefixed with "username/", library/ or dockerstorestaging/
      ######################################################################################################################################################
      if [[ $DOCKER_REPO != */* ]]; then
            printf '\nYou did not prefix the Docker Image with a user name (username/, library/ or sdockerstorestaging/)!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Verify the syntax of the Docker Image, it must be suffixed with a tag
      ######################################################################################################################################################
      local DOCKER_IMAGE_TAG=$(echo $DOCKER_IMAGE | awk -F':' '{print $2}')
      if [[ -z $DOCKER_IMAGE_TAG ]]; then
            printf '\nYou did not specify a tag for the Docker Image!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Get a Docker Registry API Token
      ######################################################################################################################################################
      local TOKEN=$(get_docker_registry_api_token "${DOCKER_REPO}"); if [[ $? -ne 0 || -z $TOKEN ]]; then return 1; fi

      ######################################################################################################################################################
      # Set the DOCKER_REGISTRY_API_QUERY_ENDPOINT variable to the Docker Hub Registry https://registry-1.docker.io if it is not set.
      ######################################################################################################################################################
      shopt -s nocasematch
      if [[ -z $DOCKER_REGISTRY_API_QUERY_ENDPOINT ]]; then
            DOCKER_REGISTRY_API_QUERY_ENDPOINT='https://registry-1.docker.io'
      elif [[ "${DOCKER_REGISTRY_API_QUERY_ENDPOINT:0:8}" != "https://" ]]; then
            DOCKER_REGISTRY_API_QUERY_ENDPOINT="https://${DOCKER_REGISTRY_API_QUERY_ENDPOINT}"
      fi
      shopt -u nocasematch    
      
      ############################################################################################################################################################
      # Call the Docker Registry API to retrieve the Digest for the Docker Image
      ############################################################################################################################################################
      local MANIFEST_HEADER='application/vnd.docker.distribution.manifest.list.v2+json,application/vnd.docker.distribution.manifest.v2+json'
      local OUTPUT=$(curl --silent --header "Authorization: BEARER ${TOKEN}" --header "Accept: ${MANIFEST_HEADER}"  --write-out "\n%{http_code}" \
      -I -X HEAD "${DOCKER_REGISTRY_API_QUERY_ENDPOINT}/v2/${DOCKER_REPO}/manifests/${DOCKER_IMAGE_TAG}")
      local HTTP_CODE=$(echo "$OUTPUT" | awk 'END{print}')
      if [[ "$HTTP_CODE" != "200" ]]; then
            printf 'Unable to get the base layer digest for the Docker Image %s!\n' "${DOCKER_REPO}:${DOCKER_IMAGE_TAG}" >&2 
            print_docker_registry_api_error "${OUTPUT}"
            return 1
      else
            # Convert the Docker Image Digest to JSON
            local DOCKER_IMAGE_DIGEST=$(echo "$OUTPUT" | grep 'Docker-Content-Digest:' | awk '{print $NF}' | sed 's|[[:space:]]*||g')
            printf "${DOCKER_IMAGE_DIGEST}" | awk 'BEGIN{print "{"} {print "\t\"DockerContentDigest\": \"" $1 "\""} END{print "}"}'
            return 0
      fi
}

############################################################################################################################################################
# Function to get the Docker image manifest for a Docker image
############################################################################################################################################################
function get_docker_image_manifest() {
      ######################################################################################################################################################
      # Verify a docker image was specified on the command line
      ######################################################################################################################################################
      local DOCKER_IMAGE=$1
      if [[ -z $DOCKER_IMAGE ]]; then
            printf 'You must specify a Docker Image!\n' >&2
            return 1
      fi    

      ######################################################################################################################################################
      # Verify the syntax of the Docker Image, it must be prefixed with a Docker Repository followed by a tag
      ######################################################################################################################################################
      local DOCKER_REPO=$(echo $DOCKER_IMAGE | awk -F':' '{print $1}')
      if [[ -z $DOCKER_REPO ]]; then
            printf 'You must specify a Docker Repo!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Verify the syntax of the Docker Repository, it must be prefixed with "username/", library/ or dockerstorestaging/
      ######################################################################################################################################################
      if [[ $DOCKER_REPO != */* ]]; then
            printf '\nYou did not prefix the Docker Image with a user name (username/, library/ or sdockerstorestaging/)!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Verify the syntax of the Docker Image, it must be suffixed with a tag
      ######################################################################################################################################################
      local DOCKER_IMAGE_TAG=$(echo $DOCKER_IMAGE | awk -F':' '{print $2}')
      if [[ -z $DOCKER_IMAGE_TAG ]]; then
            printf '\nYou did not specify a tag for the Docker Image!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Get a Docker Registry API Token
      ######################################################################################################################################################
      local TOKEN=$(get_docker_registry_api_token "${DOCKER_REPO}"); if [[ $? -ne 0 || -z $TOKEN ]]; then return 1; fi

      ######################################################################################################################################################
      # Set the DOCKER_REGISTRY_API_QUERY_ENDPOINT variable to the Docker Hub Registry https://registry-1.docker.io if it is not set.
      ######################################################################################################################################################
      shopt -s nocasematch
      if [[ -z $DOCKER_REGISTRY_API_QUERY_ENDPOINT ]]; then
            DOCKER_REGISTRY_API_QUERY_ENDPOINT='https://registry-1.docker.io'
      elif [[ "${DOCKER_REGISTRY_API_QUERY_ENDPOINT:0:8}" != "https://" ]]; then
            DOCKER_REGISTRY_API_QUERY_ENDPOINT="https://${DOCKER_REGISTRY_API_QUERY_ENDPOINT}"
      fi
      shopt -u nocasematch 

      ############################################################################################################################################################
      # Call the Docker Registry API to retrieve the Manifest for the Docker Image
      ############################################################################################################################################################
      local MANIFEST_HEADER='application/vnd.docker.distribution.manifest.list.v2+json,application/vnd.docker.distribution.manifest.v2+json'
      local OUTPUT=$(curl --silent --header "Authorization: BEARER ${TOKEN}" --header "Accept: ${MANIFEST_HEADER}" --write-out "\n%{http_code}" \
      "${DOCKER_REGISTRY_API_QUERY_ENDPOINT}/v2/${DOCKER_REPO}/manifests/${DOCKER_IMAGE_TAG}")
      local HTTP_CODE=$(echo "$OUTPUT" | awk 'END{print}')
      if [[ "$HTTP_CODE" != "200" ]]; then
            printf 'Unable to get the Docker Image manifest for the Docker Image %s!\n' "${DOCKER_REPO}:${DOCKER_IMAGE_TAG}" >&2 
            print_docker_registry_api_error "${OUTPUT}"
            return 1
      else
            local DOCKER_IMAGE_MANIFEST=$(echo "$OUTPUT" | awk 'NR > 1 { print prev } { prev = $0 }')
            printf '%s\n' "${DOCKER_IMAGE_MANIFEST}"
            return 0
      fi
}

############################################################################################################################################################
# Function to get the Docker image configuration blob for a Docker image
############################################################################################################################################################
function get_docker_image_config_blob() {
      ######################################################################################################################################################
      # Verify a docker image was specified on the command line
      ######################################################################################################################################################
      local DOCKER_IMAGE=$1
      if [[ -z $DOCKER_IMAGE ]]; then
            printf 'You must specify a Docker Image!\n' >&2
            return 1
      fi    

      ######################################################################################################################################################
      # Verify the syntax of the Docker Image, it must be prefixed with a Docker Repository followed by a tag
      ######################################################################################################################################################
      local DOCKER_REPO=$(echo $DOCKER_IMAGE | awk -F':' '{print $1}')
      if [[ -z $DOCKER_REPO ]]; then
            printf 'You must specify a Docker Repo!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Verify the syntax of the Docker Repository, it must be prefixed with "username/", library/ or dockerstorestaging/
      ######################################################################################################################################################
      if [[ $DOCKER_REPO != */* ]]; then
            printf '\nYou did not prefix the Docker Image with a user name (username/, library/ or sdockerstorestaging/)!\n' >&2
            return 1
      fi

      ######################################################################################################################################################
      # Verify the syntax of the Docker Image, it must be suffixed with a tag
      ######################################################################################################################################################
      local DOCKER_IMAGE_TAG=$(echo $DOCKER_IMAGE | awk -F':' '{print $2}')
      if [[ -z $DOCKER_IMAGE_TAG ]]; then
            printf '\nYou did not specify a tag for the Docker Image!\n' >&2
            return 1
      fi
      ######################################################################################################################################################
      # Get the Manifest for the Docker Image
      ######################################################################################################################################################
      local OUTPUT=$(get_docker_image_manifest "${DOCKER_IMAGE}"); if [[ $? -ne 0 || -z $OUTPUT ]]; then return 1; fi

      ######################################################################################################################################################
      # Get the Configuration Digest from the Manifest which is used to retrieve the Configuration Blob fot eh Docker Image
      ######################################################################################################################################################
      local DOCKER_IMAGE_CONFIG_DIGEST=$(echo "${OUTPUT}" | jq -r '.config.digest')

      ######################################################################################################################################################
      # Get a Docker Registry API Token
      ######################################################################################################################################################
      local TOKEN=$(get_docker_registry_api_token "${DOCKER_REPO}"); if [[ $? -ne 0 || -z $TOKEN ]]; then return 1; fi

      ######################################################################################################################################################
      # Set the DOCKER_REGISTRY_API_QUERY_ENDPOINT variable to the Docker Hub Registry https://registry-1.docker.io if it is not set.
      ######################################################################################################################################################
      shopt -s nocasematch
      if [[ -z $DOCKER_REGISTRY_API_QUERY_ENDPOINT ]]; then
            DOCKER_REGISTRY_API_QUERY_ENDPOINT='https://registry-1.docker.io'
      elif [[ "${DOCKER_REGISTRY_API_QUERY_ENDPOINT:0:8}" != "https://" ]]; then
            DOCKER_REGISTRY_API_QUERY_ENDPOINT="https://${DOCKER_REGISTRY_API_QUERY_ENDPOINT}"
      fi
      shopt -u nocasematch 

      ############################################################################################################################################################
      # Call the Docker Registry API to retrieve the Configuration Blob for the Docker Image
      ############################################################################################################################################################
      local MANIFEST_HEADER='application/vnd.docker.distribution.manifest.list.v2+json,application/vnd.docker.distribution.manifest.v2+json'
      local OUTPUT=$(curl --silent --location --header "Authorization: BEARER ${TOKEN}" --header "Accept: ${MANIFEST_HEADER}" --write-out "\n%{http_code}" \
      "${DOCKER_REGISTRY_API_QUERY_ENDPOINT}/v2/${DOCKER_REPO}/blobs/${DOCKER_IMAGE_CONFIG_DIGEST}")
      local HTTP_CODE=$(echo "$OUTPUT" | awk 'END{print}')
      if [[ "$HTTP_CODE" != "200" ]]; then
            printf 'Unable to get the configuration blob for the Docker Image %s!\n' "${DOCKER_REPO}:${DOCKER_IMAGE_TAG}" >&2 
            print_docker_registry_api_error "${OUTPUT}"
            return 1
      else
            local DOCKER_IMAGE_BLOB=$(echo "$OUTPUT" | awk 'NR > 1 { print prev } { prev = $0 }')
            printf '%s\n' "${DOCKER_IMAGE_BLOB}"
            return 0
      fi
}

############################################################################################################################################################
# Export the functions so they are available to sub shells
############################################################################################################################################################
export -f check_docker_registry_api_bash_functions_prerequisites
export -f print_docker_registry_api_error
export -f get_docker_registry_api_token
export -f get_docker_repo_tags
export -f get_docker_image_digest
export -f get_docker_image_manifest
export -f get_docker_image_config_blob
